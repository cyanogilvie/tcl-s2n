.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "s2n" "3" "" "0.3.5" "s2n Tcl wrapper"
.hy
.SH S2N
.PP
s2n Tcl wrapper - layer TLS onto Tcl channels
.SS SYNOPSIS
.PP
\f[B]package require s2n\f[R] ?0.3.5?
.PP
\f[B]s2n::push\f[R] \f[I]channelName\f[R] ?\f[I]-opt\f[R] \f[I]val\f[R]
\&...?
.PD 0
.P
.PD
\f[B]s2n::socket\f[R] ?\f[I]-opt\f[R] \f[I]val\f[R] \&...?
\f[I]host\f[R] \f[I]port\f[R]
.SS DESCRIPTION
.PP
This package provides a channel driver that can be stacked on any Tcl
channel that supports reading and writing to add TLS support.
The TLS implementation uses Amazon\[cq]s s2n for the TLS implementation
and aws-lc for the libcrypto implementation.
.SS COMMANDS
.TP
\f[B]s2n::push\f[R] \f[I]channelName\f[R] ?\f[I]-opt\f[R] \f[I]val\f[R] \&...?
Stack a TLS protocol driver onto the channel \f[I]channelName\f[R].
See \f[B]OPTIONS\f[R] for the allowed options.
The TLS protocol driver may be removed with the standard \f[B]chan
pop\f[R] \f[I]channelName\f[R] Tcl command.
The \f[I]channelName\f[R] channel may be blocking or non-blocking, and
may be a socket created with \f[B]-async\f[R] and still be waiting for
the connection to complete.
.TP
\f[B]s2n::socket\f[R] ?\f[I]-opt\f[R] \f[I]val\f[R] \&...? \f[I]host\f[R] \f[I]port\f[R]
Open a TCP connection to \f[I]host\f[R]:\f[I]port\f[R] and handshake
with that host as a TLS client.
See \f[B]OPTIONS\f[R] for the available options.
If \f[I]host\f[R] is not a numeric address (IPv4 or IPv6) then it
supplies the default for the \f[B]-servername\f[R] option.
.SS OPTIONS
.TP
\f[B]-config\f[R] \f[I]config\f[R]
Override the default configuration for the channel, see \f[B]CONFIG\f[R]
for details.
.TP
\f[B]-role\f[R] \f[B]client\f[R]|\f[B]server\f[R]
Set the role the TLS driver will play in the TLS handshake.
If \f[B]client\f[R] (the default) the driver will initiate a TLS
handshake otherwise it will wait to receive a ClientHello TLS message
and handshake as a server.
Only valid as an option to the \f[B]s2n::push\f[R] command, sockets
opened using \f[B]s2n::socket\f[R] area always clients.
.TP
\f[B]-servername\f[R] \f[I]host\f[R]
Set the SNI (Server Name Indication) name to send when handshaking as a
client.
There is no default, if not present, the SNI extension won\[cq]t be
used.
It\[cq]s also an error to set this option for server connections.
.TP
\f[B]-prefer\f[R] \f[B]throughput\f[R]|\f[B]latency\f[R]
Tune the implementation to optimise for throughput (large frames, fewer
syscalls) or latency (smaller frames, more syscalls).
TODO: figure out the default.
.SS CONFIG
.PP
The \f[I]config\f[R] dictionary can contain the following keys to
override the default configuration for the connection.
An error will be thrown if the dictionary contains any unrecognised
keys.
.TP
\f[B]session_tickets\f[R] \f[I]bool\f[R]
If set to a true boolean value, enable session tickets for this
connection.
Session tickets are a way to bootstrap future connections with a server
without going through the full certificate-based key exchange, enabling
lower latency connection establishment.
.TP
\f[B]ticket_lifetime\f[R] {\f[I]encrypt_decrypt_seconds\f[R] \f[I]decrypt_only_seconds\f[R]}
Set the time for which session tickets are valid, as a list of two
values.
The first, \f[I]encrypt_decrypt_seconds\f[R] is the time for which the
ticket may be used to both encrypt and decrypt.
The second, \f[I]decrypt_only_seconds\f[R], is the time during which the
key cannot be used to encrypt but may still decrypt.
.TP
\f[B]cipher_preferences\f[R] \f[I]policy\f[R]
Select the set of allowed ciphers and their preferences, via the
\f[I]policy\f[R], which is a security policy string as understood by
s2n, like \[lq]default_tls13\[rq] or \[lq]20230317\[rq].
.SS EXAMPLES
.PP
Connect to an HTTPS server, request /
.IP
.nf
\f[C]
set sock    [socket www.google.com 443]
s2n::push $sock -servername www.google.com
chan configure $sock -buffering none -translation crlf -encoding ascii
puts $sock \[dq]GET / HTTP/1.1\[rs]nHost: www.google.com\[rs]nConnection: close\[rs]n\[dq]
puts [read $sock]
close $sock
\f[R]
.fi
.SS BUILDING
.PP
This package has no external dependencies other than Tcl.
The s2n and aws-lc libraries it depends on are included as submodules
(or baked into the release tarball) and are built and statically linked
as part of the package build process.
.PP
Currently Tcl 8.7 is required, but if needed polyfills could be built to
support 8.6.
.SS From a Release Tarball
.PP
Download and extract the
release (https://github.com/cyanogilvie/tcl-s2n/releases/download/v0.3.5/tcl-s2n-0.3.5.tar.gz),
then build in the standard TEA way:
.IP
.nf
\f[C]
wget https://github.com/cyanogilvie/tcl-s2n/releases/download/v0.3.5/tcl-s2n-0.3.5.tar.gz
tar xf tcl-s2n-0.3.5.tar.gz
cd tcl-s2n-0.3.5
\&./configure
make
sudo make install
\f[R]
.fi
.SS From the Git Sources
.PP
Fetch the code (https://github.com/cyanogilvie/tcl-s2n) and submodules
recursively, then build in the standard autoconf / TEA way:
.IP
.nf
\f[C]
git clone --recurse-submodules https://github.com/cyanogilvie/tcl-s2n
cd tcl-s2n
autoconf
\&./configure
make
sudo make install
\f[R]
.fi
.SS In a Docker Build
.PP
Build from a specified release version, avoiding layer pollution and
only adding the installed package without documentation to the image,
and strip debug symbols, minimising image size:
.IP
.nf
\f[C]
WORKDIR /tmp/tcl-s2n
RUN wget https://github.com/cyanogilvie/tcl-s2n/releases/download/v0.3.5/tcl-s2n-0.3.5.tar.gz -O - | tar xz --strip-components=1 && \[rs]
    ./configure; make test install-binaries install-libraries && \[rs]
    strip /usr/local/lib/libs2n*.so && \[rs]
    cd .. && rm -rf tcl-s2n
\f[R]
.fi
.PP
For any of the build methods you may need to pass
\f[C]--with-tcl /path/to/tcl/lib\f[R] to \f[C]configure\f[R] if your Tcl
install is somewhere nonstandard.
.SS Testing
.PP
Since this package deals with security sensitive code, it\[cq]s a good
idea to run the test suite after building (especially in any automated
build or CI/CD pipeline):
.IP
.nf
\f[C]
make test
\f[R]
.fi
.PP
And maybe also the memory checker \f[C]valgrind\f[R] (requires that Tcl
and this package are built with suitable memory debugging flags, like
\f[C]CFLAGS=\[dq]-DPURIFY -Og\[dq] --enable-symbols\f[R]):
.IP
.nf
\f[C]
make valgrind
\f[R]
.fi
.SS SECURITY
.PP
Given the limitations of a scripting language environment, this
package\[cq]s code does not have sufficient control over freed memory
contents (or memory paged to disk) to guarantee that key material or
other sensitive material (like decrypted messages) can\[cq]t leak in a
way that could be exploited by other code running on the shared memory
(or disk) machine.
For this reason, careful consideration should be given to the security
requirements of the application as a whole when using this package in a
shared execution context, or in a virtual machine.
.SS FUZZING
.PP
TODO
.SS AVAILABLE IN
.PP
The most recent release of this package is available by default in the
\f[C]alpine-tcl\f[R] container image: docker.io/cyanogilvie/alpine-tcl
and the \f[C]cftcl\f[R] Tcl runtime snap:
<https://github.com/cyanogilvie/cftcl>.
.SS SEE ALSO
.PP
This package is built on the s2n
library (https://github.com/aws/s2n-tls) and the aws-lc
library (https://github.com/aws/aws-lc).
.SS PROJECT STATUS
.PP
This is a very early work in progress.
.PP
With the nature of this package a lot of care is taken with memory
handling and test coverage.
There are no known memory leaks or errors, and the package is routinely
tested by running its test suite (which aims at full coverage) through
valgrind.
The \f[C]make valgrind\f[R], \f[C]make test\f[R] and
\f[C]make coverage\f[R] build targets support these goals.
The test suite is currently a long way from full coverage.
.SS SOURCE CODE
.PP
This package\[cq]s source code is available at
<https://github.com/cyanogilvie/tcl-s2n>.
Please create issues there for any bugs discovered.
.SS LICENSE
.PP
This package is placed in the public domain: the author disclaims
copyright and liability to the extent allowed by law.
For those jurisdictions that limit an author\[cq]s ability to disclaim
copyright this package can be used under the terms of the CC0, BSD, or
MIT licenses.
No attribution, permission or fees are required to use this for whatever
you like, commercial or otherwise, though I would urge its users to do
good and not evil to the world.
.PP
The s2n and aws-lc submodules are not public domain and have their own
licenses, consult the LICENSE files in each project for the details.
.SH AUTHORS
Cyan Ogilvie.
