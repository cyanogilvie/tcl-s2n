source [file join [file dirname [info script]] common.tcl]

tcltest::testConstraint have_aio [expr {![catch {package require aio}]}]

test push-1.1 {Negotiate as a client with www.google.com, blocking basechan} -body { #<<<
	set chans_before	[lsort [chan names]]
	set sock	[socket www.google.com 443]
	s2n::push $sock -servername www.google.com -role client
	chan configure $sock -buffering none -translation crlf -encoding ascii
	puts -nonewline $sock "HEAD / HTTP/1.1\nHost: www.google.com\nConnection: close\nUser-Agent: TLS test\n\n"
	read $sock
} -cleanup {
	if {[info exists sock] && $sock in [chan names]} {close $sock}
	if {[lsort [chan names]] ne $chans_before} {puts stderr "WARNING: $chans_before != [lsort [chan names]]"}
	unset -nocomplain sock
} -match glob -result {HTTP/1.1 200 *}
#>>>
test push-1.2 {Negotiate as a client with www.google.com, non-blocking basechan} -constraints have_aio -body { #<<<
	set sock	[socket -async www.google.com 443]
	#puts stderr "waiting for writable"
	#aio waitfor writable $sock
	#puts stderr "got writable"
	chan configure $sock -blocking 0
	s2n::push $sock -servername www.google.com -role client
	chan configure $sock -buffering none -translation crlf -encoding ascii
	puts -nonewline $sock "HEAD / HTTP/1.1\nHost: www.google.com\nConnection: close\nUser-Agent: TLS test\n\n"
	set rx {}
	while {![eof $sock]} {
		aio waitfor readable $sock
		append rx [read $sock]
	}
	set rx
} -cleanup {
	if {[info exists sock] && $sock in [chan names]} {close $sock}
	unset -nocomplain sock rx
} -match glob -result {HTTP/1.1 200 *}
#>>>
test push-3.1 {abandon connection, blocking, complete} -setup { #<<<
	set child	[interp create]
	$child eval {load {} S2n}
} -body {
	$child eval {
		set sock	[socket www.google.com 443]
		s2n::push $sock -servername www.google.com -role client
		chan configure $sock -buffering none -translation crlf -encoding ascii
		puts -nonewline $sock "GET / HTTP/1.1\nHost: www.google.com\nUser-Agent: TLS test\nContent-Length: 0\n\n"
		set status_line	[gets $sock]
		puts stderr "status_line: ($status_line)"
		list [expr {$sock in [chan names]}] [string match {HTTP/1.1 200 *} $status_line]
	}
} -cleanup {
	interp delete $child
	unset -nocomplain child status_line
} -result {1 1}
#>>>
test push-3.2 {abandon connection, nonblocking, in progress} -setup { #<<<
	set child	[interp create]
	$child eval {load {} S2n}
} -body {
	$child eval {
		set sock	[socket -async www.google.com 443]
		chan configure $sock -blocking 0
		s2n::push $sock -servername www.google.com -role client
		chan configure $sock -buffering none -translation crlf -encoding ascii
		puts -nonewline $sock "HEAD / HTTP/1.1\nHost: www.google.com\nConnection: close\nUser-Agent: TLS test\n\n"
	}
} -cleanup {
	interp delete $child
	unset -nocomplain child
} -result {}
#>>>
test push-4.1 {negotiation failed early, nonblocking} -setup { #<<<
} -body {
	set sock	[socket api.sandbox.paypal.com 443]
	chan configure $sock -blocking 0
	s2n::push $sock -servername api.sandbox.paypal.com -role client
	chan configure $sock -buffering none -translation crlf -encoding ascii
	puts -nonewline $sock "HEAD / HTTP/1.1\nHost: api.sandbox.paypal.com\nConnection: close\nUser-Agent: TLS test\n\n"
	aio waitfor readable $sock 4
} -cleanup {
	unset -nocomplain sock
} -result readable
#>>>

# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
